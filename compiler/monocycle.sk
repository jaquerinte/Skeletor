module writeback(AddrSize,BITS_REGFILE){
    in  clk;
    in  rst;
    in  wreg;
    in  m2reg;
    in [AddrSize-1:0] aluresult;
    in [AddrSize-1:0] dmemout;
    in [BITS_REGFILE:0] destination;
    out  wreg;
    out [BITS_REGFILE:0] destination;
    out [AddrSize-1:0] datareg;
}

module decode(AddrSize,BITS_REGFILE){
    in  clk;
    in  rst;
    in [AddrSize-1:0] instruction;
    in [BITS_REGFILE-1:0] destination;
    in [AddrSize-1:0] datareg;
    in  wreg;
    out  wreg;
    out  m2reg;
    out  wmem;
    out  aluc;
    out  aluimm;
    out [BITS_REGFILE:0] destination;
    out [AddrSize-1:0] op1;
    out [AddrSize-1:0] op2;
    out [AddrSize-1:0] extendedimm;
}

module execute(AddrSize,BITS_REGFILE){
    in  clk;
    in  rst;
    in  wreg;
    in  m2reg;
    in  wmem;
    in  aluc;
    in  aluimm;
    in [BITS_REGFILE:0] destination;
    in [AddrSize-1:0] op1;
    in [AddrSize-1:0] op2;
    in [AddrSize-1:0] extendedimm;
    out  wreg;
    out  m2reg;
    out  wmem;
    out [BITS_REGFILE:0] destination;
    out [AddrSize-1:0] aluresult;
    out [AddrSize-1:0] op2;
}

module memory(AddrSize,BITS_REGFILE){
    in  clk;
    in  rst;
    in  wreg;
    in  m2reg;
    in  wmem;
    in [BITS_REGFILE:0] destination;
    in [AddrSize-1:0] aluresult;
    in [AddrSize-1:0] op2;
    out  wreg;
    out  m2reg;
    out [BITS_REGFILE:0] destination;
    out [AddrSize-1:0] aluresult;
    out [AddrSize-1:0] dmemout;
}

module fetch(AddrSize){
    in  clk;
    in  rst;
    in  pc;
    out  nextpc;
    out [AddrSize-1:0] instruction;
}

module top main(AddrSize,BITS_REGFILE){
    in  rst;
    in  clk;

    fetch:U1(){
        in  rst = in rst,
        in  clk = in clk
    };

    decode:U2(){
        in  rst = in rst,
        in  clk = in clk
    };

    memory:U3(){
        in  rst = in rst,
        in  clk = in clk
    };

    writeback:U5(){
        in  rst = in rst,
        in  clk = in clk
    };

    execute:U4(){
        in  rst = in rst,
        in  clk = in clk
    };

    wire  U3.wreg -> U5.wreg;
    wire  U4.m2reg -> U3.m2reg;
    wire  U4.wreg -> U3.wreg;
    wire  U3.m2reg -> U5.m2reg;
    wire  U4.wmem -> U3.wmem;
    wire [BITS_REGFILE:0] U4.destination -> U3.destination;
    wire [AddrSize-1:0] U4.aluresult -> U3.aluresult;
    wire [AddrSize-1:0] U4.op2 -> U3.op2;
    wire [AddrSize-1:0] U5.datareg -> U2.datareg;
    wire [AddrSize-1:0] U1.instruction -> U2.instruction;
    wire [AddrSize-1:0] U2.op1 -> U4.op1;
    wire [AddrSize-1:0] U2.op2 -> U4.op2;
    wire [AddrSize-1:0] U2.extendedimm -> U4.extendedimm;
    wire [AddrSize-1:0] U3.dmemout -> U5.dmemout;
    wire [BITS_REGFILE:0] U3.destination -> U5.destination;
    wire [AddrSize-1:0] U3.aluresult -> U5.aluresult;
    wire  U5.wreg -> U2.wreg;
    wire [BITS_REGFILE:0] U5.destination -> U2.destination;
    wire  U1.nextpc -> U1.pc;
    wire  U2.aluc -> U4.aluc;
    wire  U2.aluimm -> U4.aluimm;
    wire  U2.wreg -> U4.wreg;
    wire  U2.wmem -> U4.wmem;
    wire [BITS_REGFILE:0] U2.destination -> U4.destination;
    wire  U2.m2reg -> U4.m2reg;
}
