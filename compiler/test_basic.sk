`define T_ADDR_SIZE 32
`define ADDR_SIZE 32
#define N 2
#define GENERALDESCIPTION "This is a detailed explanation use several lines to explain everything. You will forget how smart you where when coding this module"
#define WORKER1 "G.Cabo"
#define GENRALREFERENCE "https://github.com/jaquerinte/MA_2019.git"

module a (TransAddrSize, AddrSize){
    #function "AND current addr_i with previous addr_i"
    #description GENERALDESCIPTION
    #coder  WORKER1
    #references GENRALREFERENCE

    in clk;
    in rts;
    in [AddrSize -1 : 0] addr;
    out [TransAddrSize-1: 0] taddr;
    out rdy;



}
module b (TransAddrSize, AddrSize){
    #function "OR current addr_i with previous addr_i"
    #description GENERALDESCIPTION
    #coder  WORKER1
    #references GENRALREFERENCE

    in rstn;                           
    in clk;                            
    in [AddrSize-1:0] addr;            
    in [TransAddrSize-1:0] taddr;
    in in1;
    in in2;          
    out [TransAddrSize-1:0] taddr;      
    out rdy;                            
}

module c(n){
    #function "rdy_o is high when a n bit counter overflow "
    #description GENERALDESCIPTION
    #coder  WORKER1
    #references GENRALREFERENCE

    in rts;
    in clk;
    out rdy;
}



module e(){
    #function  "Three way AND gate"
    #description GENERALDESCIPTION
    #coder  WORKER1
    #references GENRALREFERENCE

    in a;
    in test;
    out b;
}

module d(){
    #function  "Three way AND gate"
    #description GENERALDESCIPTION
    #coder  WORKER1
    #references GENRALREFERENCE

    in in1;
    in in2;
    in in3;
    in in4;
    in in5;
    in in6;
    in in7;
    out out1; // no puede ser out porque es una palabra reservada

    e:muy_test(){
        in a = in in1,
        in test = in in2,
        out b = out out1
    };

}

module top simple_example(TransAddrSize = T_ADDR_SIZE, AddrSize = ADDR_SIZE){
    #function  "Module to provide a reference output"
    #coder  WORKER1
    #references GENRALREFERENCE

    in clk;
    in rts;
    in [AddrSize -1 : 0] addr;
    out [TransAddrSize-1: 0] taddr;
    out rdy;
    

    a:x(AddrSize = AddrSize, TransAddrSize = TransAddrSize){
        in clk = in clk,
        in rts = in rts,
        in addr = in addr
    };

    b:y(TransAddrSize, AddrSize){
        in rstn = in rts,
        in clk = in clk,
        in addr = in addr,
        out taddr = out taddr
    };
    
    c:z(N){
        in rts = in rts,
        in clk = in clk
    };

    d:w(){
        out out1 = out rdy
    };

    e:test(){
        in a = in rts
    };
    
    wire [TransAddrSize-1:0] x.taddr -> y.taddr;
    flop x.rdy -> w.in1;
    wire x.rdy -> w.in4;
    wire x.rdy -> test.test;
    wire y.rdy -> w.in2;
    wire z.rdy -> w.in3;
    
}
